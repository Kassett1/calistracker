// üì¶ Import des modules
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const mysql = require("mysql2");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");

// üåê Configuration de la connexion MySQL
const connection = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

// üöÄ Initialisation de l'app
const app = express();
const port = 3001;
const jwtSecret = process.env.JWT_SECRET;
const saltRounds = 10;
const verifyToken = require("./authMiddleware");

// üîê Routes
app.use(
  cors({
    origin: "http://localhost:3000",
  })
);
app.use(express.json());

// üåç Routes
app.listen(port, () => {
  console.log(`\nüöÄ Serveur lanc√© sur http://localhost:${port}`);
});

app.post("/signup", (req, res) => {
  console.log("\n----------------------------------------");

  const email = req.body.email;
  const password = req.body.password;

  // üîê G√©n√©rer le sel et hasher le mot de passe
  bcrypt.genSalt(saltRounds, function (err, salt) {
    if (err) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du sel :", err);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }

    bcrypt.hash(password, salt, function (err, hash) {
      if (err) {
        console.error("‚ùå Erreur lors du hash du mot de passe :", err);
        return res
          .status(500)
          .json({ success: false, message: "Erreur serveur" });
      }

      // üîç V√©rifier si un utilisateur avec le m√™me email existe d√©j√†
      connection.query(
        "SELECT * FROM users WHERE email = ?",
        [email],
        (err, results) => {
          if (err) {
            console.error(
              "‚ùå Erreur lors de la v√©rification des utilisateurs :",
              err
            );
            return res
              .status(500)
              .json({ success: false, message: "Erreur serveur" });
          }

          if (results.length > 0) {
            console.log("‚ö†Ô∏è   Utilisateur d√©j√† existant, inscription refus√©e.");
            return res.json({ success: false, message: "Email d√©j√† utilis√©" });
          }

          // ‚úÖ Ins√©rer l'utilisateur avec le mot de passe hash√©
          connection.query(
            "INSERT INTO users (email, password) VALUES (?, ?)",
            [email, hash],
            (err) => {
              if (err) {
                console.error(
                  "‚ùå Erreur lors de l'insertion de l'utilisateur :",
                  err
                );
                return res
                  .status(500)
                  .json({ success: false, message: "Erreur serveur" });
              } else {
                console.log("üë§ Utilisateur inscrit avec succ√®s !");
                return res.json({
                  success: true,
                  message: "Utilisateur inscrit",
                });
              }
            }
          );
        }
      );
    });
  });
});

app.post("/login", (req, res) => {
  console.log("\n----------------------------------------");
  const email = req.body.email;
  const password = req.body.password;

  // 1Ô∏è‚É£ Recherche l'utilisateur par email
  connection.query(
    "SELECT * FROM users WHERE email = ?",
    [email],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur lors de la requ√™te SQL :", err);
        return res
          .status(500)
          .json({ success: false, message: "Erreur serveur" });
      }

      if (results.length === 0) {
        console.log("‚ùå Utilisateur non trouv√©");
        return res.json({ success: false, message: "Utilisateur non trouv√©" });
      }

      const user = results[0]; // contient user.password (le hash)

      // 2Ô∏è‚É£ Compare le mot de passe clair avec le hash
      bcrypt.compare(password, user.password, (errCompare, isMatch) => {
        if (errCompare) {
          console.error("‚ùå Erreur bcrypt :", errCompare);
          // Renvoie une 500 si bcrypt plante
          return res
            .status(500)
            .json({ success: false, message: "Erreur serveur" });
        }

        if (isMatch) {
          console.log("‚úÖ Mot de passe correct, g√©n√©ration du token");
          // 3Ô∏è‚É£ G√©n√©ration du token JWT
          const token = jwt.sign({ userId: user.id }, jwtSecret);
          return res.json({ success: true, token });
        } else {
          console.log("‚ùå Mot de passe incorrect");
          return res.json({
            success: false,
            message: "Mot de passe incorrect",
          });
        }
      });
    }
  );
});

app.post("/add-date", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");

  // 1Ô∏è‚É£ R√©cup√®re la date envoy√©e par le client
  const rawDate = req.body.date;
  const date = new Date(rawDate);
  date.setHours(0, 0, 0, 0); // neutralise l‚Äôheure pour ne comparer que la date

  // 2Ô∏è‚É£ Calcule l‚Äô√©tat selon si la s√©ance est pass√©e ou non
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const state = today <= date ? "faite" : "ratee";

  // 3Ô∏è‚É£ Formate la date en YYYY-MM-DD pour MySQL
  const formattedDate = `${date.getFullYear()}-${
    date.getMonth() + 1
  }-${date.getDate()}`;

  // 4Ô∏è‚É£ R√©cup√®re l'userId depuis le token
  const userId = req.userId;

  // 5Ô∏è‚É£ V√©rifie si la date existe d√©j√† pour cet utilisateur
  connection.query(
    "SELECT * FROM calendar WHERE DATE(date) = ? AND user_id = ?",
    [formattedDate, userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la v√©rification :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }

      if (results.length > 0) {
        // 6Ô∏è‚É£ Si d√©j√† pr√©sent ‚Üí renvoie un 409 (conflit) et on arr√™te
        console.log("‚ö†Ô∏è  S√©ance d√©j√† enregistr√©e pour cette date");
        return res.status(409).json({ message: "S√©ance d√©j√† existante" });
      }

      // 7Ô∏è‚É£ Sinon, ins√®re la nouvelle s√©ance
      connection.query(
        "INSERT INTO calendar (date, state, user_id) VALUES (?, ?, ?)",
        [formattedDate, state, userId],
        (err2) => {
          if (err2) {
            console.error("‚ùå Erreur SQL lors de l'insertion :", err2);
            return res.status(500).json({ message: "Erreur d'insertion" });
          }
          console.log("üìÖ S√©ance ins√©r√©e avec succ√®s !");
          // 8Ô∏è‚É£ Tout s'est bien pass√© ‚Üí renvoie un 201 Created
          return res.status(201).json({ message: "S√©ance ajout√©e" });
        }
      );
    }
  );
});

app.get("/get-dates", verifyToken, (req, res) => {
  console.log("\n‚û°Ô∏è Requ√™te re√ßue pour /get-dates");

  // 1. R√©cup√©ration de l'userId depuis le middleware
  const userId = req.userId;

  // 2. Requ√™te SQL filtr√©e sur user_id
  connection.query(
    "SELECT * FROM calendar WHERE user_id = ?",
    [userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de l'obtention des dates :", err);
        return res.status(500).json({ error: "Erreur serveur" });
      }

      // 3. Construction des deux tableaux de dates
      const successDates = [];
      const failDates = [];

      results.forEach((session) => {
        const d = new Date(session.date);
        // G√®re plus proprement le 0 devant les jours/mois < 10
        const yyyy = d.getFullYear();
        const mm = String(d.getMonth() + 1).padStart(2, "0");
        const dd = String(d.getDate()).padStart(2, "0");
        const formattedDate = `${yyyy}-${mm}-${dd}`;

        if (session.state === "faite") {
          successDates.push(formattedDate);
        } else {
          failDates.push(formattedDate);
        }
      });

      // 4. Envoi de la r√©ponse JSON
      return res.json({ successDates, failDates });
    }
  );
});

app.post("/add-goal", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");

  // R√©cup√®re l'objectif envoy√©e par le client
  const newGoal = req.body.goal;

  // R√©cup√®re l'userId depuis le token
  const userId = req.userId;

  // V√©rifie si l'objectif existe d√©j√† pour cet utilisateur
  connection.query(
    "SELECT * FROM goals WHERE goal = ? AND user_id = ?",
    [newGoal, userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la v√©rification :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }

      if (results.length > 0) {
        // Si d√©j√† pr√©sent ‚Üí renvoie un 409 (conflit) et on arr√™te
        console.log("‚ö†Ô∏è  Objectif d√©j√† enregistr√©e pour cette date");
        return res.status(409).json({ message: "Objectif d√©j√† existant" });
      }

      // Sinon, ins√®re le nouvel objectif
      connection.query(
        "INSERT INTO goals (goal, user_id) VALUES (?, ?)",
        [newGoal, userId],
        (err2) => {
          if (err2) {
            console.error("‚ùå Erreur SQL lors de l'insertion :", err2);
            return res.status(500).json({ message: "Erreur d'insertion" });
          }
          console.log("üìÖ Objectif ins√©r√© avec succ√®s !");
          // Tout s'est bien pass√© ‚Üí renvoie un 201 Created
          return res.status(201).json({ message: "Objectif ajout√©" });
        }
      );
    }
  );
});

app.get("/get-goals", verifyToken, (req, res) => {
  console.log("\n‚û°Ô∏è Requ√™te re√ßue pour /get-goals");

  // 1. R√©cup√©ration de l'userId depuis le middleware
  const userId = req.userId;

  // 2. Requ√™te SQL filtr√©e sur user_id
  connection.query(
    "SELECT * FROM goals WHERE user_id = ?",
    [userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de l'obtention des objectifs :", err);
        return res.status(500).json({ error: "Erreur serveur" });
      }

      // 3. Construction du tableau des objectifs
      const goals = results.map((g) => ({
        id: g.id,
        goal: g.goal,
      }));

      // 4. Envoi de la r√©ponse JSON
      return res.json({ goals });
    }
  );
});

app.delete("/delete-goal/:id", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");
  console.log("\n‚û°Ô∏è DELETE /delete-goal/:id");
  const userId = req.userId;
  const goalId = req.params.id;

  connection.query(
    "DELETE FROM goals WHERE user_id = ? AND id = ?",
    [userId, goalId],
    (err, result) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la suppression :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }
      if (result.affectedRows === 0) {
        // Aucun objectif supprim√© = pas trouv√© ou pas √† cet utilisateur
        return res.status(404).json({ message: "Objectif non trouv√©" });
      }
      console.log("‚úÖ Objectif supprim√© avec succ√®s !");
      return res.status(200).json({ message: "Objectif supprim√©" });
    }
  );
});

app.get("/get-sessions", verifyToken, (req, res) => {
  console.log("\n‚û°Ô∏è Requ√™te re√ßue pour /get-sessions");

  // 1. R√©cup√©ration de l'userId depuis le middleware
  const userId = req.userId;

  // 2. Requ√™te SQL filtr√©e sur user_id
  connection.query(
    "SELECT * FROM sessions WHERE user_id = ?",
    [userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de l'obtention des s√©ances :", err);
        return res.status(500).json({ error: "Erreur serveur" });
      }

      // 3. Construction du tableau des objectifs
      const sessions = results.map((session) => ({
        id: session.id,
        name: session.name,
        exercises: JSON.parse(session.exercises),
        days: session.days,
      }));

      // 4. Envoi de la r√©ponse JSON
      return res.json({ sessions });
    }
  );
});

app.post("/add-exercise", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");

  // 1Ô∏è‚É£ On r√©cup√®re l‚ÄôID de la s√©ance et l‚Äôexercice envoy√© par le client
  const sessionId = req.body.id;
  const newExercise = req.body.exercise;

  // 2Ô∏è‚É£ On r√©cup√®re l‚ÄôID de l‚Äôutilisateur, inject√© par le middleware verifyToken
  const userId = req.userId;

  // 3Ô∏è‚É£ On commence par v√©rifier que l‚Äôexercice n‚Äôest pas d√©j√† dans le tableau JSON
  const checkSql = `
    SELECT 1
      FROM sessions
     WHERE id = ?
       AND user_id = ?
       AND JSON_CONTAINS(exercises, JSON_QUOTE(?), '$')
  `;
  connection.query(
    checkSql,
    [sessionId, userId, newExercise],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la v√©rification :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }

      if (results.length > 0) {
        // 4Ô∏è‚É£ Si l‚Äôexo existe d√©j√† ‚Üí conflit
        console.log("‚ö†Ô∏è Exercice d√©j√† pr√©sent dans cette s√©ance");
        return res.status(409).json({ message: "Exercice d√©j√† existant" });
      }

      // 5Ô∏è‚É£ Sinon, on l‚Äôajoute √† la fin du tableau JSON `exercises`
      const updateSql = `
      UPDATE sessions
         SET exercises = JSON_ARRAY_APPEND(exercises, '$', ?)
       WHERE id = ?
         AND user_id = ?
    `;
      connection.query(updateSql, [newExercise, sessionId, userId], (err2) => {
        if (err2) {
          console.error("‚ùå Erreur SQL lors de l‚Äôinsertion :", err2);
          return res.status(500).json({ message: "Erreur d'insertion" });
        }

        // 6Ô∏è‚É£ Tout s‚Äôest bien pass√©
        console.log("‚úÖ Exercice ajout√© avec succ√®s !");
        return res.status(201).json({ message: "Exercice ajout√©" });
      });
    }
  );
});

app.delete("/delete-exercise/:sessionId/:exercise", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");
  console.log("‚û°Ô∏è DELETE //delete-exercise/:sessionId/:exercise");

  const userId = req.userId; // 1) userId extrait par verifyToken
  const sessionId = req.params.sessionId; // 2) id de la s√©ance dans l‚ÄôURL
  const exercise = req.params.exercise; // 3) exercice √† retirer

  // 4) On met le m√™me exercice entre guillemets pour JSON_SEARCH
  //    (JSON_QUOTE fait √ßa aussi mais ici on passe directement l‚Äôexercice brut)
  const sql = `
      UPDATE sessions
      SET exercises = JSON_REMOVE(
        exercises,
        JSON_UNQUOTE(
          JSON_SEARCH(exercises, 'one', ?, NULL, '$')
        )
      )
      WHERE id = ? 
        AND user_id = ? 
        AND JSON_CONTAINS(exercises, JSON_QUOTE(?), '$')
    `;

  connection.query(
    sql,
    [exercise, sessionId, userId, exercise],
    (err, result) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la suppression :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }
      if (result.affectedRows === 0) {
        // Soit la s√©ance n‚Äôexiste pas, soit l‚Äôexercice n‚Äô√©tait pas dans le JSON
        return res.status(404).json({ message: "Exercice non trouv√©" });
      }
      console.log("‚úÖ Exercice supprim√© avec succ√®s !");
      return res.status(200).json({ message: "Exercice supprim√©" });
    }
  );
});

app.delete("/delete-session/:sessionId", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");
  console.log("‚û°Ô∏è DELETE //delete-session/:sessionId");

  // 1Ô∏è‚É£ On r√©cup√®re l'id de l'utilisateur depuis le middleware verifyToken
  const userId = req.userId;
  // 2Ô∏è‚É£ On r√©cup√®re l'id de la s√©ance √† supprimer depuis les params
  const sessionId = req.params.sessionId;

  // 3Ô∏è‚É£ On ex√©cute la requ√™te DELETE en s'assurant que la s√©ance appartient bien √† l'utilisateur
  connection.query(
    "DELETE FROM sessions WHERE user_id = ? AND id = ?",
    [userId, sessionId],
    (err, results) => {
      if (err) {
        // 4Ô∏è‚É£ Erreur SQL ‚Üí on log et on renvoie un 500
        console.error(
          "‚ùå Erreur SQL lors de la suppression de la s√©ance :",
          err
        );
        return res
          .status(500)
          .json({ success: false, message: "Erreur serveur" });
      }

      if (results.affectedRows === 0) {
        // 5Ô∏è‚É£ Aucune ligne supprim√©e ‚Üí soit l'id n'existe pas, soit ne t‚Äôappartient pas
        console.log(
          "‚ö†Ô∏è  Aucune s√©ance trouv√©e √† supprimer pour cet utilisateur"
        );
        return res
          .status(404)
          .json({ success: false, message: "S√©ance introuvable" });
      }

      // 6Ô∏è‚É£ Tout s'est bien pass√©
      console.log("‚úÖ S√©ance supprim√©e avec succ√®s !");
      return res
        .status(200)
        .json({ success: true, message: "S√©ance supprim√©e" });
    }
  );
});

app.post("/add-session", verifyToken, (req, res) => {
  console.log("\n----------------------------------------");

  // R√©cup√®re l'objectif envoy√©e par le client
  const sessionName = req.body.name;
  const sessionDays = JSON.stringify(req.body.days);

  // R√©cup√®re l'userId depuis le token
  const userId = req.userId;

  // V√©rifie si l'objectif existe d√©j√† pour cet utilisateur
  connection.query(
    "SELECT * FROM sessions WHERE name = ? AND user_id = ?",
    [sessionName, userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå Erreur SQL lors de la v√©rification :", err);
        return res.status(500).json({ message: "Erreur serveur" });
      }

      if (results.length > 0) {
        // Si d√©j√† pr√©sent ‚Üí renvoie un 409 (conflit) et on arr√™te
        console.log("‚ö†Ô∏è  S√©ance d√©ja enregistr√©e pour ce nom");
        return res.status(409).json({ message: "S√©ance d√©ja enregistr√©e pour ce nom" });
      }

      // Sinon, ins√®re le nouvel objectif
      connection.query(
        "INSERT INTO sessions (user_id, name, days) VALUES (?, ?, ?)",
        [userId, sessionName, sessionDays],
        (err2) => {
          if (err2) {
            console.error("‚ùå Erreur SQL lors de l'insertion :", err2);
            return res.status(500).json({ message: "Erreur d'insertion" });
          }
          console.log("üìÖ S√©ance ins√©r√©e avec succ√®s !");
          // Tout s'est bien pass√© ‚Üí renvoie un 201 Created
          return res.status(201).json({ message: "S√©ance ajout√©e" });
        }
      );
    }
  );
});